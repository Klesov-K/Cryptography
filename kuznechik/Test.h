#pragma once
#include "stdafx.h"
#include "round.h"

// 	Механизм контроля работоспособности криптографических алгоритмов

bool TEST_S() {
	uint8_t in[] = { 0xff , 0xee , 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00 };
	uint8_t expectOut[] = { 0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc };
	uint8_t out[16];
	S(in, out);
	for (int i = 0; i < 16; ++i) {
		if (out[i] != expectOut[i])
			return false;
	}
	return true;
}

bool TEST_R() {
	uint8_t var[] = { 0x00 , 0x00 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 };
	uint8_t expectVar[] = { 0x94 , 0x00 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
	//uint8_t var[] = { 0xa5 , 0x94 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	R(var);
	for (int i = 0; i < 16; ++i) {
		if (var[i] != expectVar[i])
			return false;
	}
	return true;
}


 
bool TEST_L() {
	uint8_t in[] = { 0x64 , 0xa5 , 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t expectOut[] = { 0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d };
	//uint8_t in[] = { 0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 };
	uint8_t out[16];
	L(in, out);
	for (int i = 0; i < 16; ++i) {
		if (out[i] != expectOut[i])
			return false;
	}
	return true;

	
}
bool Test() {
	if (TEST_S() && TEST_R() && TEST_L()) {
		TRACE_NORMAL(L"Тесты для преобразований S, L, R успешно пройдены");
		return true;
	}
	return false;
}
//void TEST_gen_k() {
//	gen_K();
//}
//void TEST_gen_C() {
//
//	gen_C();
//}
